name: Update docker images

env:
  DOCKER_REPO: "srbarba/pnpm"

on:
  push:
    branches:
      - main
    paths:
      - "src/index.mjs"
      - "src/getNodeVariants.mjs"
      - "src/getPnpmVariants.mjs"
      - "src/getDockerImagePlatforms.mjs"
      - "variants/nodeVariants.json"
      - "variants/pnpmVariants.json"
      - "variants/allVariants.json"
      - "Dockerfile"
      - "package-lock.json"
      - "package.json"
      - ".github/workflows/update-images.yml"

jobs:
  prepare_variants:
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.run_script.outputs.result }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install dependencies with pnpm
        run: npm ci

      - name: Run getNodeVariantsToUpdate script and capture output
        id: run_script
        uses: actions/github-script@v7
        env:
          NODE_NO_WARNINGS: 1
        with:
          script: |
            const { getVariantsToUpdate } = await import('${{ github.workspace }}/src/index.mjs')
            return getVariantsToUpdate('srbarba')
      
      - name: Debug output
        run: echo "${{ steps.run_script.outputs.result }}"

      - name: Debug output json
        run: echo "${{ fromJson(steps.run_script.outputs.result) }}"

      - name: Upload nodeVariants.json for use in other jobs
        uses: actions/upload-artifact@v4
        with:
          name: variants-folder
          path: variants

  build_and_test_images:
    needs: prepare_variants
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ needs.prepare_variants.outputs.variants }}
    strategy:
      matrix:
        variant: ${{ fromJson(needs.prepare_variants.outputs.variants) }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: "srbarba"
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and test Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          build-args: |
            NODE_VARIANT=${{ matrix.variant.variant }}
            PNPM_VERSION=${{ matrix.variant.pnpm }}
          tags: ${{ matrix.variant.testTag }}
          load: true

      - name: Test Docker image
        run: |
          docker run --rm ${{ matrix.variant.testTag }} node -v
          docker run --rm ${{ matrix.variant.testTag }} pnpm -v

      - name: Get image platforms
        id: get_image_platforms
        uses: actions/github-script@v7
        with:
          script: |
            const { getDockerImagePlatforms } = await import('${{ github.workspace }}/getDockerImagePlatforms.mjs')
            return getDockerImagePlatforms('node:${{ matrix.variant.variant }}')

      - name: Push Docker image if tests pass
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          provenance: false
          platforms: ${{ join(fromJson(steps.get_image_platforms.outputs.result), ',') }}
          build-args: |
            NODE_VARIANT=${{ matrix.variant.variant }}
            PNPM_VERSION=${{ matrix.variant.pnpm }}
          tags: ${{ join(matrix.variant.tags, ',') }}

  update_repository:
    needs: build_and_test_images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Download variants folder for commit
        uses: actions/download-artifact@v4
        with:
          name: variants-folder

      - name: Prepare variant names for commit message
        id: prepare_commit
        run: |
          variant_names=$(echo '${{ needs.build_and_test_images.outputs.variants }}' | jq -r '.[].variant' | paste -sd, -)
          echo "::set-output name=variant_names::$variant_names"

      - name: Create Pull Request
        id: create_pull_request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: update variants ${{ steps.prepare_commit.outputs.variant_names }}"
          title: "feat: update variants ${{ steps.prepare_commit.outputs.variant_names }}"
          branch: "feature/update-variants"
          delete-branch: true
          add-paths: "variants/nodeVariants.json,variants/allVariants.json,variants/pnpmVariants.json"

      - name: Enable Pull Request Automerge
        if: steps.create_pull_request.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pull_request.outputs.pull-request-number }}
          merge-method: squash
